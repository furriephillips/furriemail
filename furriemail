#!/usr/bin/perl -w

=head1 NAME

B<furriemail> - An interactive (if you want), front-end for sending test emails

=head1 DESCRIPTION

B<furriemail> was written to make sending test emails quick and easy and to aid in more specific SMTP Mail Testing of: -

=over 4

=item I<Clean email SMTP conversation>

=item I<Spam email handling>

=item I<Virus email handling>

=item I<SPF functionality>

=back

=cut

use strict;
use Sys::Hostname;
use Getopt::Long;
use Pod::Usage;
use MIME::Lite;
use Net::SMTP;
use IO::Socket::INET;
use MIME::Base64;
use DBI;

#
#use CGI qw(:standard);
#use CGI::Pretty;
## Global variable declarations - I know, I know, but some of these are neccessary
#
## Defaults you can tweak to your desired values
#
## Folder where we store various (optional) configuration files
my $furriemail_config = "~/.furriemail";
## List of IPs that we will scan during SMTPRC
my $smtprc_scan_list = "$furriemail_config/SMTPRC_SCAN_LIST";
## List of checks that we perform during SMTPRC
my $relay_checks = "$furriemail_config/Relay_Checks.conf";
# List of IPs/hostnames of MTAs to test
my @mtas = ('localhost');
my $user = "$ENV{USER}";
my $hostname = `hostname --fqdn`; chomp $hostname;
my $server = "$hostname";
my $port = 25;
my $helo = $hostname;
my $my_domain = $hostname;
my $authuser = 'username';
my $authpass = 'password';
my $signature = 'Internet Minion';
my $phone = '+44 (0)1454 555 111';
#
## Hard-coded elements
#
my ($interactive,$auth,$authtype,$enc_user,$enc_pass,$mime_lite,$net_smtp,$io_socket_inet,$etrn,$test,$subject,$message,$squirt,$squirt_data,$include,$include_data,$mailtype,$help,$man);
my ($debug,$mail_from,$rcpt_to,$from,$to,$rbltestip,$abuse_url,$spammy);
## Time stuff
my ($s,$m,$h,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
my @weekdays = (qw/Monday Tuesday Wednesday Thursday Friday Saturday Sunday/);
my @months = (qw/Janruary February March April May June July August September October November December/);
$year=$year+1900;
my $date = "$weekdays[$wday] $mday $months[$mon], $year";
## Message ID in RFC compliant format
my $msgid = `date +%Y%m%d%H%M.%S%N%u`; chomp $msgid;


#
## GetOptions System for handling command-line options, help, usage and man page.
#
GetOptions (
    "debug=s"	    =>  \$debug,
    "server=s"	    =>  \$server,
    "port=s"	    =>  \$port,
    "helo=s"	    =>  \$helo,
    "auth=s"	    =>  \$auth,
    "user=s"	    =>  \$authuser,
    "pass=s"	    =>  \$authpass,
    "mail_from=s"   =>  \$mail_from,
    "rcpt_to=s"	    =>  \$rcpt_to,
    "from=s"	    =>  \$from,
    "to=s"	    =>  \$to,
    "subject=s"	    =>  \$subject,
    "data=s"	    =>  \$message,
    "i"		    =>  \$interactive,
    "etrn=s"	    =>  \$etrn,
    "test"	    =>  \$test,
    "mailtype=s"    =>  \$mailtype,
    "spammy"        =>  \$spammy,
    "rbltestip=s"   =>  \$rbltestip,
    "abuseurl=s"    =>  \$abuse_url,
    "squirt=s"	    =>  \$squirt,
    "include=s"	    =>  \$include,
    "help"	    =>  \$help,
    "man"	    =>  \$man,
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;


#
##Set some defaults (mainly for ease of use (laziness))
#
$debug = 1 unless ($debug);


#
## Gather the required parameters interactively...
#
if ($interactive) {

    print "\n\tWhich Server do you want to test?:  "; 
    chomp ($server = <STDIN>);

    print "\n\tConnect to $server to which port?:  "; 
    chomp ($port = <STDIN>);

    print "\n\tSpecify the HELO/EHLO message:  "; 
    chomp ($helo = <STDIN>);

    if ($auth) {

        print "\n\t[32mAuthenticate with the SMTP server[0m [33m$server[0m"; 
        print "\n\t[31mBe careful, as the password will be visible![0m\n"; 

        print "\tUsername:  ";
        chomp ($authuser = <STDIN>);

        print "\tPassword:  ";
        chomp ($authpass = <STDIN>);

        print "\n";
    }

    print "\n\tSMTP Envelope 'MAIL FROM':  "; 
    chomp ($mail_from = <STDIN>);

    print "\n\tSMTP Envelope 'RCPT TO':  "; 
    chomp ($rcpt_to = <STDIN>);

    print "\n\tHeader 'From':  "; 
    chomp ($from = <STDIN>);

    print "\n\tHeader 'To':  "; 
    chomp ($to = <STDIN>);

    print "\n\tHeader 'Subject':  "; 
    chomp ($subject = <STDIN>);
    
    print "\n\tEmail Body:  "; 
    chomp ($message = <STDIN>);

    print "\n\tDebug Level ('1' Shows The SMTP Conversation):  "; 
    chomp ($debug = <STDIN>);

    print "\n\tAll required information gathered now.\n";
    print "\n\t  Sending message on its way.\n";
}


#
## read_socket($) SubRoutine to read the output from the socket
#
sub read_socket($)
{
    my ($socket) = @_;
    my @ret;
    my $line = <$socket>;
    push @ret, $line;
    while (substr($line,3,1) eq '-') {
        $line = <$socket>;
        push @ret, $line;
    };
    return \@ret;
};

#
## encode_userpass($$) SubRoutine to Base64 encode the username:password pair
#
sub encode_userpass($$)
{
    my ($unenc_user,$unenc_pass) = @_;
    my $enc_userpass = encode_base64("\000$unenc_user\000$unenc_pass");
    chomp $enc_userpass;
    return $enc_userpass;
};

#
## encode_user($) SubRoutine to Base64 encode the username
#
sub encode_user($)
{
    my ($unenc_user) = @_;
    my $enc_user = encode_base64("$unenc_user");
    chomp $enc_user;
    return $enc_user;
};


#
## encode_pass($) SubRoutine to Base64 encode the password
#
sub encode_pass($)
{
    my ($unenc_pass) = @_;
    my $enc_pass = encode_base64("$unenc_pass");
    chomp $enc_pass;
    return $enc_pass;
};


#
## io_socket_inet_send() IO::Socket::INET method
#
sub io_socket_inet_send($$$$$$$$$$$$$$$)
{
    my ($srv,$prt,$hst,$hi,$dbg,$usr,$pas,$f1,$t1,$f2,$t2,$re,$body,$sq_data,$inc_data) = @_;

    my $sock = IO::Socket::INET->new(
        PeerAddr    =>  "$srv:$prt",
        Proto	    =>  "tcp",
    ) or die "\n[1;31m$!\n$@[0m\n\n";

    print "[1;35mWaiting for SMTP Banner from $srv:$prt[0m\n" if($dbg == 1);

    my $banner = read_socket($sock);

    if ($banner->[0] =~ /^220/) {

        print "[32m" . $banner->[0] . "[0m" if($dbg == 1 or $dbg == 99);

        if ($banner->[0] =~ /(Microsoft ESMTP MAIL Service, Version: some_broken_version)/) {

            print "\n[1;35m***\tSending HELO instead of EHLO, because ESMTP in: -\n***\t$1 is broken[0m\n\n" if($dbg == 1);
            print $sock "HELO $hi\r\n";
            print "[36mHELO $hi[0m\n" if($dbg == 1);

        } else {

            print $sock "EHLO $hi\r\n";
            print "[36mEHLO $hi[0m\r\n" if($dbg == 1);

        };

        $authtype = "$srv does not support AUTHentication";

        my $features = read_socket($sock);
        foreach my $feature (@{$features}) {
            chomp $feature;
            print "[32m$feature[0m\n" if($dbg == 1);
            if ($feature =~ /^250-AUTH(.*$)/) {
                my $authdata = $1;
                if ($authdata =~ /PLAIN/) {
                    $authtype = 'PLAIN';
                } elsif ($authdata =~ /LOGIN/) {
                    $authtype = 'LOGIN';
                } else {
                    $authtype = "AUTH type(s): $authdata, not yet supported by $0";
                }
            }
        }

    } else {
        print "[31m" . $banner->[0] . "[0m" if($dbg == 1 or $dbg == 99);
        exit 1;
    }

    if ($auth) {

        my ($auth_response,$user_response,$pass_response);

        if ($auth eq 'PLAIN') {

            my $auth_string = encode_userpass($usr,$pas);

            print $sock "AUTH PLAIN $auth_string\r\n";
            print "[36mAUTH PLAIN $auth_string[0m\n" if($dbg == 1);

            $auth_response = read_socket($sock);

            print "[32m" . $auth_response->[0] . "[0m" if($dbg == 1);

        } elsif ($auth eq 'LOGIN') {

            print $sock "AUTH LOGIN\r\n";
            print "[36mAUTH LOGIN[0m\n" if($dbg == 1);

            $auth_response = read_socket($sock);

            print "[32m" . $auth_response->[0] . "[0m" if($dbg == 1);

            if ($auth_response->[0] =~ /^334 VXNlcm5hbWU6/) {

                my $auth_string = encode_user($usr);

                print $sock "$auth_string\r\n";
                print "[36m$auth_string[0m\n" if ($dbg == 1);

                $auth_response = read_socket($sock);

                print "[32m" . $auth_response->[0] . "[0m" if($dbg == 1);

                if ($auth_response->[0] =~ /^334 UGFzc3dvcmQ6/) {

                    my $auth_string = encode_pass($pas);

                    print $sock "$auth_string\r\n";
                    print "[36m$auth_string[0m\n" if ($dbg == 1);

                    $auth_response = read_socket($sock);

                    print "[32m" . $auth_response->[0] . "[0m" if ($dbg == 1);
                }
            }
        } else {

            print "\n[1;31m***\t$authtype[0m\n" if($dbg == 1);
            print "\n[1;33mTry again without specifying --auth=whatever[0m\n\n" if($dbg == 1);
            exit 0;

        }

        if ($auth eq 'check') {
            print $sock "QUIT\r\n";
            print "[36mQUIT[0m\n" if($dbg == 1);

            if ($auth_response->[0] =~ /^235/) {
                print "\n[1;33m***\tAuth Response from $srv: [1;32m" . $auth_response->[0] . "[0m\n";
            } elsif ($auth_response->[0] =~ /^535/) {
                print "\n[1;33m***\tAuth Response from $srv: [1;31m" . $auth_response->[0] . "[0m\n";
            } else {
                print "\n[33m***\tUnknown Response from $srv: [1;31m" . $auth_response->[0] . "[0m\n";
            }
            print "You only wanted to check authentication... Exiting.\n\n" if($dbg == 1);
            exit 0;
        }

        if ($auth_response->[0] !~ /^235/) {
            if ($auth eq 'ignorefail') {
                print "\n[1;33m***\tIgnoring: [1;31m" . $auth_response->[0] . "[1;33m***\tcontinuing on oblivious...[0m\n\n";
            } else {
                print $sock "QUIT\r\n";
                print "[36mQUIT[0m\n" if($dbg == 1);
                print "[31m" . $auth_response->[0] . "[0m" if($dbg == 1);
                exit 0;
            }
        }
    } # This ends the 'if $auth' statement.
    #if ($auth_response->[0] =~ /^334/) {

    if ($mailtype eq 'rbltest') {
        print $sock "XCLIENT NAME=$user ADDR=$rbltestip\r\n";
        print "[36mXCLIENT NAME=$user ADDR=$rbltestip[0m\n" if($dbg == 1);

        my $xclient_response = read_socket($sock);

        if ($xclient_response->[0] =~ /^220/) {
            print "[32m" . $xclient_response->[0] . "[0m" if($dbg == 1);
            print $sock "EHLO $user\r\n";
            print "[36mEHLO $user[0m\n" if($dbg == 1);

            my $xcfeatures = read_socket($sock);

            foreach my $xcfeature (@{$xcfeatures}) {
                chomp $xcfeature;
                print "[32m$xcfeature[0m\n" if($dbg == 1);

                if ($xcfeature =~ /^250 /) {
                    next;
                }
            }
        } else {
            print "[1;31m" . $xclient_response->[0] . "[0m";
            exit 1;
        }
    }

    print $sock "MAIL FROM:<$f1>\r\n";
    print "[36mMAIL FROM:<$f1>[0m\n" if($dbg == 1);
    my $mail_from_response = read_socket($sock);

    if ($mail_from_response->[0] =~ /^250/) {
        print "[32m" . $mail_from_response->[0] . "[0m" if($dbg == 1);
        print $sock "RCPT TO:<$t1>\r\n";
        print "[36mRCPT TO:<$t1>[0m\n" if($dbg == 1);
    } else {
        print "[1;31m" . $mail_from_response->[0] . "[0m";
        exit 1;
    }

    my $rcpt_to_response = read_socket($sock);
    if ($rcpt_to_response->[0] =~ /^250/) {
        print "[32m" . $rcpt_to_response->[0] . "[0m" if($dbg == 1);
        print $sock "DATA\r\n";
        print "[36mDATA[0m\n" if($dbg == 1);
    } else {
        print "[1;31m" . $rcpt_to_response->[0] . "[0m";
        exit 1;
    }

    my $user_agent = "$hst:$0";
    my $message_id = "<$msgid\@$hst>";
    my $data_response = read_socket($sock);

    if ($data_response->[0] =~ /^354/) {
        print "[32m" . $data_response->[0] . "[0m" if($dbg == 1);

        if ($squirt) {
            print $sock "$sq_data\r\n";
            print "[36m$sq_data\n[0m" if($dbg == 1);
        } else {
            print $sock "User-Agent: $user_agent\r\n";
            print "[36mUser-Agent: $user_agent[0m\n" if($dbg == 1);
            print $sock "Message-Id: $message_id\r\n";
            print "[36mMessage-Id: $message_id[0m\n" if($dbg == 1);
            print $sock "From: $f2\r\n";
            print "[36mFrom: $f2[0m\n" if($dbg == 1);
            print $sock "To: $t2\r\n";
            print "[36mTo: $t2[0m\n" if($dbg == 1);
            $re = '' if ($spammy);
            print $sock "Subject: $re\r\n";
            print "[36mSubject: $re[0m\n" if($dbg == 1);
            my $DateHeader = `date +'%a, %d %b %Y %T %Z (%z)'`; chomp $DateHeader;
            print $sock "Date: $DateHeader\r\n";
            print "[36mDate: $DateHeader[0m\n" if($dbg == 1);
            unless ($mailtype eq 'eicarcom') {
                print $sock "\r\n";
                print "\n" if($dbg == 1);
            }
            print $sock "$body\r\n";
            print "[36m$body[0m" if($dbg == 1);

            if ($include_data) {
                my $begin_inc = "# BEGIN '$include' #";
                my $end_inc = "# END '$include' #";
                print $sock "\r\n$begin_inc\r\n\r\n";
                print "[36m\n$begin_inc\n\n[0m" if($dbg == 1);
                print $sock "$inc_data\r\n";
                print "[36m$inc_data\n[0m" if($dbg == 1);
                print $sock "\r\n$end_inc\r\n";
                print "[36m\n$end_inc\n[0m" if($dbg == 1);
            }
        }
        print $sock "\r\n.\r\n";
        print "\n[36m.[0m\n" if($dbg == 1);
    }

    ## Handle annoying multi-line queue responses (you know what I'm talking about, Symantec): -
    # 553-Message filtered. Refer to the Troubleshooting page at
    # 553-http://www.symanteccloud.com/troubleshooting for more
    # 553 information. (#5.7.1)
    my $queue_response = read_socket($sock);
    for my $qresp (@{$queue_response}) {
        chomp $qresp;
        if ($qresp =~ m/^250 /) {
            print "[32m" . $qresp . "[0m\n" if($dbg == 1 or $dbg == 99);
        } else {
            print "[31m" . $qresp . "[0m\n" if($dbg == 1 or $dbg == 99);
        }
    }
    print $sock "QUIT\r\n";
    print "[36mQUIT[0m\n" if($dbg == 1 or $dbg == 99);

    my $byebye = read_socket($sock);
    if ($byebye->[0] =~ /^221 .*$/) {
        print "[32m" . $byebye->[0] . "[0m\n" if($dbg == 1);
    } else {
        print "[31m" . $byebye->[0] . "[0m\n";
        exit 1;
    }

    exit 0;
} # This is the end of the 'io_socket_inet_send' sub.



#
## Main Program Logic
#
## Option Logic
#
$mail_from = "$user\@$my_domain" unless defined $mail_from;
if ($mail_from =~ m/^admin/) {
    print "\n[1;31mYou must specify a TO: and FROM: address which is not \"admin\@example.com\"[0m\n\n[1;33mTry $0 --help\n\n";
    exit 1;
}
$rcpt_to = $mail_from unless defined $rcpt_to;
$from = $mail_from unless defined $from;
$to = $rcpt_to unless defined $to;
$mailtype = "clean" unless defined $mailtype;

#
## Yahoo BlackList Check
#
if ($mailtype eq 'yahoo') {
    my $YahooMTA = `/usr/bin/host -t mx yahoo.com | /bin/cut -f7 -d' ' | /bin/sed -e 's/\\.\$//' | /usr/bin/head -1`;
    chomp $YahooMTA;
    my $sock = IO::Socket::INET->new(
        PeerAddr    =>  "$YahooMTA:25",
        Proto	    =>  "tcp",
    ) or die "\n[1;31m$!\n$@[0m\n\n";

    print "[1;35mWaiting for SMTP Banner from $YahooMTA[0m\n" if($debug == 1);

    my $banner = read_socket($sock);

    if ($banner->[0] =~ /^220/) {
        print "$banner->[0]\n" if($debug == 1 or $debug == 99);
        print $sock "QUIT\r\n";
        print "[36mQUIT[0m\n" if($debug == 1);
        my $byebye = read_socket($sock);
        print "[32m" . $byebye->[0] . "[0m\n" if($debug == 1);
        exit 0;
    } else {
        print "$banner->[0]\n" if($debug == 1 or $debug == 99);
        print $sock "QUIT\r\n";
        print "[36mQUIT[0m\n" if($debug == 1);
        my $byebye = read_socket($sock);
        print "[32m" . $byebye->[0] . "[0m\n" if($debug == 1);
        exit 2;
    }
}

#
## Blank Test SetUp
#
if ($mailtype eq 'blank') {
	$subject = qq{This is a blank email...} unless defined $subject;
	$message = "" unless defined $message;
};

#
## Clean Test SetUp
#
if ($mailtype eq 'clean') {
	$subject = qq{This is a SMTP Test Message (from $user\@$hostname)} unless defined $subject;
	my $clean_test_explanation = qq{Hello $to,

This is a test message, please ignore it if possible.

It has been sent to test some functionality,
or perhaps to diagnose a problem.

Thank you for your patience.

Regards,
--
$signature
$phone
	};
	$message = $clean_test_explanation unless defined $message;
};

#
## GTUBE Spam Test SetUp
#
if ($mailtype eq 'spam') {
	$subject = qq{This is a (GTUBE) Spam Test (from $user\@$hostname)} unless defined $subject;
	my $spam_trigger = 'XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X';
	my $spam_test_explanation = qq{

The long string of characters above, is a recognised spam test and should trigger your anti-spam filters.

This is the GTUBE, the: -

	Generic
	Test for
	Unsolicited
	Bulk
	Email

For further information, see:  http://GTUBE.net/
	};

	$message = $spam_trigger.$spam_test_explanation;
};

#
## EICAR Virus Test SetUp
#
if ($mailtype eq 'virus') {
	$subject = qq{This is a safe (EICAR) Virus Test (from $user\@$hostname)} unless defined $subject;
	my $virus_trigger = 'X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*';
	my $virus_test_explanation = qq{

The long string of characters above, is an industry standard safe anti-virus system test, which should trigger your anti-virus scanning engine.

For further information, see:  http://www.eicar.org/anti_virus_test_file.htm
	};
	$message = $virus_trigger.$virus_test_explanation;
};

#
## EICAR.com Virus Attachment Test SetUp
#
if ($mailtype eq 'eicarcom') {
	$subject = qq{Attached is a safe (EICAR) Virus Test File (from $user\@$hostname)} unless defined $subject;
	my $eicarcom_test_message = qq{MIME-Version: 1.0
Content-Type: multipart/mixed;
 boundary="------------769D802CED54BB4FA905B357"
Content-Language: en-GB

This is a multi-part message in MIME format.
--------------769D802CED54BB4FA905B357
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 7bit

<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  </head>
  <body>
    The attached file is an industry standard safe anti-virus system
    test, which should trigger your anti-virus scanning engine.<br>
    <br>
    For further information, see:
    <a href="http://www.eicar.org/anti_virus_test_file.htm" title="EICAR.org">http://www.eicar.org/anti_virus_test_file.htm</a>
  </body>
</html>

--------------769D802CED54BB4FA905B357
Content-Type: application/x-msdos-program;
 name="EICAR.com"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename="EICAR.com"

WDVPIVAlQEFQWzRcUFpYNTQoUF4pN0NDKTd9JEVJQ0FSLVNUQU5EQVJELUFOVElWSVJVUy1U
RVNULUZJTEUhJEgrSCoK
--------------769D802CED54BB4FA905B357--
};
	$message = $eicarcom_test_message;
};

#
## Abuse Test SetUp
#
if ($mailtype eq 'abuse') {
	$subject = qq{This is an Abuse Test (from $user\@$hostname)} unless defined $subject;
	my $abuse_test_explanation = qq{
This message has been relayed via an insecure mailserver and is proof of that server's insecurity.

For further information, see: $abuse_url
	};
	$message = $abuse_test_explanation;
};

#
## Inspirational Test SetUp
#
if ($mailtype eq 'inspirational') {
	$subject = qq{Have a wonderful day $user!} unless defined $subject;
	my $clean_test_explanation = qq{ Today I WILL: -

 * Be Happy and Healthy in mind and body ;)
 * Spread love and happiness wherever possible xx
 * Drink a pint of water every hour
 * Succeed and excel in everything I do.
 * Concentrate and focus on one thing at a time.
 * Work as hard as possible at work, then *RELAX* :)
	};
	$message = $clean_test_explanation unless defined $message;
};

#
## RBL Test SetUp
#
if ($mailtype eq 'rbltest') {
	$subject = qq{RBL Test} unless defined $subject;
	my $clean_test_explanation = qq{Hello $to,

This is a test message, please ignore it if possible.

It has been sent to test some functionality,
or perhaps to diagnose a problem.

Thank you for your patience.

Regards,
--
$signature
$phone
	};
	$message = $clean_test_explanation unless defined $message;
};

#
## Squirt Test SetUp
#
if ($mailtype eq 'squirt') {
	open(I,"<$squirt") or die "cannot open $squirt";
	$squirt_data = join("",<I>);
	close(I);
};

#
## include stuff
#
if ($include) {
	open(I,"<$include") or die "cannot open $include";
	$include_data = join("",<I>);
	if ($subject) {
		$subject = "$subject (Including contents of file '$include')";
	};
	close(I);
} else {
	$include_data = '';
};

io_socket_inet_send($server,$port,$hostname,$helo,$debug,$authuser,$authpass,$mail_from,$rcpt_to,$from,$to,$subject,$message,$squirt_data,$include_data);





=head1	SYNOPSIS

B<furriemail> [options]

Use 'B< --help>' or 'B< --man>' for more info.

=head1	OPTIONS

=over	4

=item	B<--help>

Shows the help/usage message

=item	B<--man>

Shows the full documentation

=item	B<--debug=1|0>

[1|0] to debug or not to debug

=item	B<--server>

SMTP Relay Host IP/DNS Name

=item	B<--port>

TCP port to connect on (defaults to B<25>)

=item	B<--helo>

HELO <helo_hostname>

=item	B<--user>

SASL Username

=item	B<--pass>

SASL Password

=item	B<--mail_from>

MAIL FROM

=item	B<--rcpt_to>

RCPT TO

=item	B<--from>

From

=item	B<--to>

To

=item	B<--subject>

Subject

=item	B<--data>

Message body.

=item	B<--i>

Interactive Mode (takes all options from the CLI)...

=item	B<--auth> 

Manually authenticate with the server --auth= either PLAIN or LOGIN

=item	B<--spam>

Include the GTUBE Spam Test, in the email body.

=item	B<--virus>

Include the EICAR Virus Test, in the email body

=item	B<--include=somefile>

include the contents of 'somefile'

=back

=cut

